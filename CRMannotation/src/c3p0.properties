#数据库连接配置信息
c3p0.driverClass=com.mysql.jdbc.Driver
c3p0.jdbcUrl=jdbc:mysql://localhost:3306/CRM?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useCursorFetch=true
c3p0.user=root
c3p0.password=123456

###################################################################################################
#c3p0连接池相关配置信息

#一、基本配置项
#当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default:3
c3p0.acquireIncrement=20

#初始化时获取连接数，取值应在minPoolSize与maxPoolSize之间。Default:3
c3p0.initialPoolSize=5

#接池中保留的最大连接数。Default:15
#如果获得新连接时会使连接总数超过这个值则不会再获取新连接，而是等待其他连接释放，所以这个值有可能会设计地很大
c3p0.maxPoolSize=100

#连接的最大空闲时间 default:0 单位：秒 。如果超过这个时间，某个数据库连接还没有被使用，则会断开掉这个连接如果为0，则永远不会断开连接
c3p0.maxIdleTime=60

#连接池保持的最小连接数 default:3。 后面的maxIdleTimeExcessConnections跟这个配合使用来减轻连接池的负载
c3p0.minPoolSize=3


#二、管理连接池的大小和连接的生存时间
#配置连接的生存时间 default:0 单位：秒 超过这个时间的连接将由连接池自动断开丢弃掉。当然正在使用的连接不会马上断开，而是等待它close再断开。配置为0的时候则不会对连接的生存时间进行限制
c3p0.maxConnectionAge=30

#这个配置主要是为了减轻连接池的负载  default:0 单位：秒 比如连接池中连接数因为某次数据访问高峰导致创建了很多数据连接，
#但是后面的时间段需要的数据库连接数很少，则此时连接池完全没有必要维护那么多的连接，所以有必要将断开丢弃掉一些连接来减轻负载，
#必须小于maxIdleTime。配置不为0，则会将连接池中的连接数量保持到minPoolSize。为0则不处理。
c3p0.maxIdleTimeExcessConnections=30


#三、配置PreparedStatement缓存 
#连接池为数据源缓存的PreparedStatement的总数。由于PreparedStatement属于单个Connection,
#所以这个数量应该根据应用中平均连接数乘以每个连接的平均PreparedStatement来计算。为0的时候不缓存，
#同时maxStatementsPerConnection的配置无效。default : 0
#c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0则缓存不生效，只要有一个不为0则语句的缓存就能生效。
c3p0.maxStatements=50

#连接池为数据源单个Connection缓存的PreparedStatement数，这个配置比maxStatements更有意义，
#因为它缓存的服务对象是单个数据连接，如果设置的好，肯定是可以提高性能的。为0的时候不缓存。default : 0
c3p0.maxStatementsPerConnection=15


#四、重连相关配置 
#定义在从数据库获取新连接失败后重复尝试的次数。default: 30。小于等于0表示无限次
c3p0.acquireRetryAttempts=5

#重新尝试的时间间隔，default：1000毫秒
c3p0.acquireRetryDelay=300

#如果为true，则当连接获取失败时自动关闭数据源，除非重新启动应用程序。所以一般不用。default : false
#c3p0.breakAfterAcquireFailure=false

#c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能通过多线程实现多个操作同时被执行。Default: 3
c3p0.numHelperThreads=10


#五、定制管理Connection的生命周期
#用来定制Connection的管理，比如在Connection acquire 的时候设定Connection的隔离级别，或者在Connection丢弃的时候进行资源关闭，
#就可以通过继承一个AbstractConnectionCustomizer来实现相关方法，配置的时候使用全类名。有点类似监听器的作用。
#c3p0.connectionCustomizerClassName=


#六、配置未提交的事务处理 
#连接池在回收数据库连接时是否自动提交事务。如果为false则会回滚未提交的事务，如果为true则会自动提交事务。default : false（不建议使用）
#c3p0.autoCommitOnClose=false;

#未处理完的事务让连接池来处理 default:false（不建议使用）
#c3p0.forceIgnoreUnresolvedTransactions=false


#七、配置debug和回收Connection
#为0的时候要求所有的Connection在应用程序中必须关闭。如果不为0，则强制在设定的时间到达后回收Connection，所以必须小心设置，
#保证在回收之前所有数据库操作都能够完成。这种限制减少Connection未关闭情况的不是很适用。建议手动关闭。default : 0 单位秒（不建议使用）
#c3p0.unreturnedConnectionTimeout=30

#如果为true并且unreturnedConnectionTimeout设为大于0的值，当所有被getConnection出去的连接unreturnedConnectionTimeout时间到的时候，就会打印出堆栈信息。
#只能在debug模式下适用，因为打印堆栈信息会减慢getConnection的速度  default:false（不建议使用）
#c3p0.debugUnreturnedConnectionStackTraces=false


#八、配置连接测试：因为连接池中的数据库连接很有可能是维持数小时的连接，很有可能因为数据库服务器的问题，网络问题等导致实际连接已经无效，
#但是连接池里面的连接还是有效的，如果此时获得连接肯定会发生异常，所以有必要通过测试连接来确认连接的有效性。
#下面的前三项用来配置如何对连接进行测试，后三项配置对连接进行测试的时机

#用来配置测试连接的一种方式。配置一个表名，连接池根据这个表名创建一个空表，并且用自己的测试sql语句在这个空表上测试数据库连接这个表只能由c3p0来使用，
#用户不能操作，同时用户配置的preferredTestQuery 将会被忽略。default : null
#c3p0.automaticTestTable=

#用来配置测试连接的另一种方式。与上面的automaticTestTable二者只能选一。
#如果要用它测试连接，千万不要设为null，否则测试过程会很耗时，同时要保证sql语句中的表在数据库中一定存在。default : null
#c3p0.preferredTestQuery=

#连接池用来支持automaticTestTable和preferredTestQuery测试的类，必须是全类名就像默认的那样，
#可以通过实现UnifiedConnectionTester接口或者继承AbstractConnectionTester来定制自己的测试方法
#default:com.mchange.v2.c3p0.impl.DefaultConnectionTester
#c3p0.connectionTesterClassName=

#用来配置测试空闲连接的间隔时间。测试方式还是上面的两种之一，可以用来解决MySQL8小时断开连接的问题。因为它保证连接池会每隔一定时间对空闲连接进行一次测试，
#从而保证有效的空闲连接能每隔一定时间访问一次数据库，将于MySQL8小时无会话的状态打破。为0则不测试。default:0
#c3p0.idleConnectionTestPeriod=

#如果为true，则在close的时候测试连接的有效性。为了提高测试性能，可以与idleConnectionTestPeriod搭配使用，
#配置preferredTestQuery或automaticTestTable也可以加快测试速度。default : false
#c3p0.testConnectionOnCheckin=true

#性能消耗大。如果为true，在每次getConnection的时候都会测试，为了提高性能，可以与idleConnectionTestPeriod搭配使用，
#配置preferredTestQuery或automaticTestTable也可以加快测试速度。default : false
#c3p0.testConnectionOnCheckout=false

#一个checkout连接的超时设置，一旦一个checkout连接超时，他将物理的关闭，而不是返回池中，主要是防止连接被长期使用不释放，这个设置也是比较危险的
#c3p0.unreturnedConnectionTimeout=15
















